from pprint import pprint as pp


class Car(object):
    DIESEL = 'diesel'
    PETROL = 'petrol'
    TANK_VOLUME_75 = 75.00
    TANK_VOLUME_60 = 60.00

    def __init__(self, engine, tank):
        self.engine = engine
        self.tank = tank
        self.fuel_level = 0
        self.mileage = 0
        self.price = 100000.00
        self.total_fuel_cost = 0


    def get_maxmileage(self):
        maxmileage = int()
        if self.engine == Car.DIESEL:
            self.maxmileage = 150000
        else:
            self.maxmileage = 100000
        return self.maxmileage

    def get_fuel_price(self):
        if self.engine == Car.DIESEL:
            return 1.8
        else:
            return 2.4

    def get_renovation_cost(self):
        if engine == Car.DISEL:
            self.renovation_cost = 150000
        else:
            self.renovation_cost = 100000
        return self.renovation_cost

    def get_fuel_consumption(self):
        if self.engine == Car.DIESEL:
            if self.mileage > 1000:
                self.fuel_consumption = 6.00/100.00 * self.mileage/1000.00 * 1.01
            else:
                self.fuel_consumption = 6.00/100.00
        else:
            if self.mileage > 1000.00:
                self.fuel_consumption = 8.00/100.00 * self.mileage/1000.00 * 1.01
            else:
                self.fuel_consumption = 8.00/100.00
        return self.fuel_consumption

    def get_price_reduction(self):
        if self.engine == Car.DIESEL:
            if self.mileage > 1000:
                self.price = 100000 - self.mileage/1000 * 10.5
        else:
            if self.mileage > 1000:
                self.price = 100000 - self.mileage/1000 * 9.5
        return self.price

    def fill_fuel(self, l):
        if l < self.tank - self.fuel_level:
            self.fuel_level += l
        else:
            l = self.tank - self.fuel_level
            self.fuel_level = self.tank
        self.total_fuel_cost += l * self.get_fuel_price()
        return self.fuel_level

    def drive(self, km):
        if km >= self.fuel_level/self.get_fuel_consumption():
            km = self.fuel_level/self.get_fuel_consumption()
            print ('After ', int(self.fuel_level / self.get_fuel_consumption()), 'km you need to fill the tank')
        if km >= self.get_maxmileage() - self.mileage:
            km = self.get_maxmileage() - self.mileage
            print ('After ', self.get_maxmileage() - self.mileage, 'km you\'ll reach your last destination')
        if self.get_maxmileage() == self.mileage:
            km = 0
            #print (You\'ve reached your last destination')
        self.mileage += km
        self.price = self.get_price_reduction()
        self.fuel_level -= km * self.get_fuel_consumption()
        return self.mileage, self.price, self.fuel_level


class CarPlant(object):
    @staticmethod
    def produce_car(car_number):
        all_cars = []
        for _ in range(car_number):
            if not _ % 3:
                engine = Car.DIESEL
            else:
                engine = Car.PETROL
            if not _ % 5:
                tank = Car.TANK_VOLUME_60
            else:
                tank = Car.TANK_VOLUME_75
            all_cars.append(Car(engine, tank))
        return all_cars

all_cars = CarPlant.produce_car(20)
all_cars[0].fill_fuel(6)
all_cars[2].fill_fuel(80)
all_cars[0].drive(160000)
for i in range(10):
    print(all_cars[i].__dict__)

(all_cars[9].mileage)=2
