quote = 'Te Zen of Python, by Tim Peters \
Beautiful is better than ugly. \
Explicit is better than implicit. \
Simple is better than complex. \
Complex is better than complicated. \
Flat is better than nested. \
Sparse is better than dense. \
Readability counts. \
Special cases aren \'t special enough to break the rules. \
Although practicality beats purity. \
Errors should never pass silently. \
Unless explicitly silenced. \
In the face of ambiguity, refuse the temptation to guess. \
There should be one-- and preferably only one --obvious way to do it. \
Although that way may not be obvious at first unless you\'re Dutch. \
Now is better than never. \
Although never is often better than *right* now. \
If the implementation is hard to explain, it\'s a bad idea. \
If the implementation is easy to explain, it may be a good idea. \
Namespaces are one honking great idea -- let\'s do more of those!'
print 'Letters in this tex:'
text = {}
for char in quote:
    if char in quote:
       text[char] = quote.count(char)
    continue
for a, b in text.items():
    print a, '=', b

print 'This a list by alphabet'
kl = text.keys()
kl = list(kl)
kl.sort()
for char in kl:
    print char, '=', text[char]

print 'This a list by number'
vl = list(text.items())
vl.sort(key=lambda item: item[1])
for item in vl:
    print item[1],'=',str(item[0])

print 'Flipped!'
vl.sort(key=lambda item: item[1], reverse=True)
for item in vl:
    print item[1],'=',str(item[0])
