from pprint import pprint as pp
import random


class Car(object):
    DIESEL = 'diesel'
    PETROL = 'petrol'
    TANK_VOLUME_75 = 75.00
    TANK_VOLUME_60 = 60.00

    def __init__(self, engine, tank, mileage=0):
        self.engine = engine
        self.tank = tank
        self._mileage = mileage
        self.renovation = 0
        self.renovation_cost = 0
        self.refueling = 0
        self.fuel_level = 0
        self.price = 100000.00
        self.total_fuel_cost = 0
        self.service_pass = 0

    @property
    def mileage(self):
        return (self._mileage)

    @mileage.setter
    def milleage(self, millege):
        self._mileage = self._mileage

    def get_maxmileage(self):
        maxmileage = int()
        if self.engine == Car.DIESEL:
            self.maxmileage = 150000
        else:
            self.maxmileage = 100000
        return self.maxmileage

    def get_renovation(self):
        self.renovation = self.get_maxmileage() - self._mileage
        return self.renovation

    def get_fuel_price(self):
        if self.engine == Car.DIESEL:
            return 1.8
        else:
            return 2.4

    def get_renovation_cost(self):
        if engine == Car.DISEL:
            self.renovation_cost = 700
        else:
            self.renovation_cost = 500
        return self.renovation_cost

    def get_fuel_consumption(self):
        i = int(int(self._mileage) / 1000)
        if self.engine == Car.DIESEL:
            if self._mileage > 1000.00:
                self.fuel_consumption = 0.06 + (i*0.0006)
            else:
                self.fuel_consumption = 0.06
        else:
            if self._mileage > 1000.00:
                self.fuel_consumption = 0.08 + (i*0.0008)
            else:
                self.fuel_consumption = 0.08

        return self.fuel_consumption

    def get_price_reduction(self):
        if self.engine == Car.DIESEL:
            if self._mileage > 1000:
                self.price = 100000 - self._mileage / 1000 * 10.5
        else:
            if self._mileage > 1000:
                self.price = 100000 - self._mileage / 1000 * 9.5
        return self.price

    def fill_fuel(self, l):
        if l < self.tank - self.fuel_level:
            self.fuel_level += l
        else:
            l = self.tank - self.fuel_level
            self.fuel_level = self.tank
        self.total_fuel_cost += l * self.get_fuel_price()
        return self.fuel_level

    def drive(self):
        km = int()
        km = random.randrange(55000, 286000)
        # print km
        self.fuel_level = self.fill_fuel(self.tank)
        self.refueling += 1
        for route in range(km):
            if self._mileage < self.get_maxmileage():
                self._mileage += 1
                self.price = self.get_price_reduction()
                self.fuel_level -= self.get_fuel_consumption()
                self.renovation = self.get_maxmileage() - self._mileage

                if self.fuel_level < 1:
                    self.fuel_level = self.fill_fuel(self.tank)
                    self.refueling += 1
            else:
                break
        # print ('Mileage =', self._mileage ,  'Price =', self.price, ' Total fuel cost =', self.total_fuel_cost, 'Refueling =' , self.refueling, ' Renovation after ', self.renovation, 'km')
        return self._mileage, self.price, self.fuel_level, self.fuel_consumption

    def car_service (self):
        for kfz in all_cars:
            if self.renovation == 0:
                self.renovation = self.maxmileage
                self.maxmileage += self.maxmileage
                self.service_pass += 1
            return self.service_pass

class CarPlant(object):

    @staticmethod
    def produce_car(car_number):
        all_cars = []
        for _ in range(car_number):
            if not _ % 3:
                engine = Car.DIESEL
            else:
                engine = Car.PETROL
            if not _ % 5:
                tank = Car.TANK_VOLUME_60
            else:
                tank = Car.TANK_VOLUME_75
            all_cars.append(Car(engine, tank))
        return all_cars


all_cars = CarPlant.produce_car(10)
# all_cars[0].mileage = 100
# print (all_cars[0].mileage)
# all_cars[0].fill_fuel(6)
# all_cars[2].fill_fuel(80)

#all_cars[random.randint(0, 19)].drive()


for car in range(10):
    all_cars[car].drive()

# for car in range(10):
#     all_cars[car].car_service()

for i in range(10):
    print(all_cars[i].__dict__)

# all_cars[0].mileage = 0
