from pprint import pprint as pp
import random
import threading
from time import sleep
from threading import Thread, Lock, RLock, BoundedSemaphore, Semaphore

max_connections = 10
sb = BoundedSemaphore(max_connections)
s = Semaphore(2)
stop = RLock()


class Car(object):
    DIESEL = 'diesel'
    PETROL = 'petrol'
    TANK_VOLUME_75 = 75.00
    TANK_VOLUME_60 = 60.00

    def __init__(self, engine, tank, mileage=0):
        self._engine = engine
        self.tank = tank
        self._mileage = mileage
        self.renovation = 0
        self.renovation_cost = 0
        self.refueling = 0
        self.fuel_level = 0
        self.price = 100000.00
        self.total_fuel_cost = 0
        self.service_pass = 0
        self.total_service_cost = 0

    def __iter__(self):
        return iter(self.__dict__.values())

    def __str__(self):
        return str(self.__class__) + ": " + str(self.__dict__)

    def __repr__(self):
        return 'Car("%s","%s", "%s)' % (self._engine, self.renovation, self.price)

    @property
    def mileage(self):
        return (self._mileage)

    @mileage.setter
    def mileage(self, mileage):
        self._mileage = self.get_mileage

    @property
    def engine(self):
        return (self._engine)

    def get_maxmileage(self):
        maxmileage = int()
        if self.engine == Car.DIESEL:
            self.maxmileage = 150000
        else:
            self.maxmileage = 100000
        return self.maxmileage

    def get_renovation(self):
        self.renovation = self.get_maxmileage() - self._mileage
        return self.renovation

    def get_fuel_price(self):
        if self.engine == Car.DIESEL:
            return 1.8
        else:
            if self.mileage <= 50000:
                return 2.2
            else:
                return 2.4

    def get_renovation_cost(self):
        if self.engine == Car.DIESEL:
            self.renovation_cost = 700
        else:
            self.renovation_cost = 500
        return self.renovation_cost

    def get_fuel_consumption(self):
        percentile = int(self._mileage / 1000)
        if self.engine == Car.DIESEL:
            if percentile >= 1:
                self.fuel_consumption = 0.06 + (int(percentile) * 0.0006)
            else:
                self.fuel_consumption = 0.06
        else:
            if percentile >= 1:
                self.fuel_consumption = 0.08 + (int(percentile) * 0.0008)
            else:
                self.fuel_consumption = 0.08

        return self.fuel_consumption

    def get_price_reduction(self):
        if self.engine == Car.DIESEL:
            if self._mileage > 1000:
                self.price = 100000 - self._mileage / 1000 * 10.5
        else:
            if self._mileage > 1000:
                self.price = 100000 - self._mileage / 1000 * 9.5
        return self.price

    def fill_fuel(self, l):
        if l < self.tank - self.fuel_level:
            self.fuel_level += l
        else:
            l = self.tank - self.fuel_level
            self.fuel_level = self.tank
        self.total_fuel_cost += l * self.get_fuel_price()
        return self.fuel_level

    def drive(self):
        sb.acquire()
        km = int()
        km = random.randrange(55000, 286000)

        self.fuel_level = self.fill_fuel(self.tank)
        self.refueling += 1
        for route in range(km):
            if self._mileage < self.get_maxmileage():
                self._mileage += 1
                self.price = self.get_price_reduction()
                self.fuel_level -= self.get_fuel_consumption()
                self.renovation = self.get_maxmileage() - self._mileage

                if self.fuel_level < 1:
                    self.fuel_level = self.fill_fuel(self.tank)
                    self.refueling += 1
            else:
                break
        print (
        'Mileage =', self._mileage, 'Price =', self.price, ' Total fuel cost =', self.total_fuel_cost, 'Refueling =',
        self.refueling, ' Renovation after ', self.renovation, 'km')
        sleep(1)
        sb.release()
        return self.fuel_level, self.fuel_consumption

    def get_car_service(self):

        for kfz in all_cars:
            if self.renovation == 0:
                self.renovation = self.maxmileage
                self.maxmileage += self.maxmileage
                self.service_pass += 1
                self.fuel_level = 0
                self.total_service_cost += self.get_renovation_cost()
            return self.total_service_cost

    # @staticmethod
    # def print_results():
    #     all_diesel = []
    #     print all_cars
    #     for car in all_cars:
    #         if car.engine == 'diesel':
    #             all_diesel.append(car)
    #     print (all_diesel)


class CarPlant(object):
    @staticmethod
    def produce_car(car_number):
        all_cars = []
        for _ in range(car_number):
            if not _ % 3:
                engine = Car.DIESEL
            else:
                engine = Car.PETROL
            if not _ % 5:
                tank = Car.TANK_VOLUME_60
            else:
                tank = Car.TANK_VOLUME_75
            all_cars.append(Car(engine, tank))
        return all_cars


class Carpool(object):
    @staticmethod
    def go(car_number):
        car = 0
        all_threads = []
        for car in range(car_number):
            thread = threading.Thread(target=all_cars[car].drive)
            # print threa.getName
            all_threads.append(thread)
        for thread in all_threads:
            if not thread.is_alive():
                thread.start()
                thread.join()


class Accounting(object):
    @staticmethod
    def print_results():
        all_diesel = []
        all_petrol =[]
        total_price = 0
        #print all_cars
        for car in all_cars:
            total_price += car.price
            if car.engine == 'diesel':
                all_diesel.append(car)
            else:
                all_petrol.append(car)
        all_petrol.sort(key=lambda x: x.renovation)
        all_diesel.sort(key=lambda x: x.price)
        # all_cars.reduce(key=lambda x: x.price)

        print str(all_diesel), str(all_petrol), total_price



all_cars = CarPlant.produce_car(10)
Carpool.go(10)
# for i in range(11):
#     print(all_cars[i].__dict__)
Accounting.print_results()
